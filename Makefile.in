LIBS=-L$(CURDIR) -L$(FLINT_MPIR_LIB_DIR) -L$(FLINT_MPFR_LIB_DIR) -L$(FLINT_NTL_LIB_DIR) -lflint -lmpfr -lmpir -lm -lpthread
LIBS2=-L$(FLINT_MPIR_LIB_DIR) -L$(FLINT_MPFR_LIB_DIR) -L$(FLINT_NTL_LIB_DIR) -lmpfr -lmpir -lm -lpthread
INCS=-I$(CURDIR) -I$(FLINT_MPIR_INCLUDE_DIR) -I$(FLINT_MPFR_INCLUDE_DIR) -I$(FLINT_NTL_INCLUDE_DIR)
LINKLIBS=

LD_LIBRARY_PATH:=${CURDIR}:${FLINT_MPFR_LIB_DIR}:${FLINT_MPIR_LIB_DIR}:${FLINT_NTL_LIB_DIR}:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH
export

SOURCES = $(wildcard *.c)

HEADERS = $(wildcard *.h)

OBJS = $(patsubst %.c, build/%.o, $(SOURCES)) $(foreach dir, $(BUILD_DIRS), build/$(dir)/$(dir).a)

LIB_OBJS = $(patsubst %.c, build/%.lo, $(SOURCES)) $(foreach dir, $(BUILD_DIRS), build/$(dir)/*.lo)

LIB_SOURCES = $(SOURCES) $(foreach dir, $(BUILD_DIRS), $(wildcard $(dir)/*.c))

EXMP_SOURCES = $(wildcard examples/*.c)

TEST_SOURCES = $(wildcard test/*.c)

PROF_SOURCES = $(wildcard profile/*.c)

TUNE_SOURCES = $(wildcard tune/*.c)

EXMPS = $(patsubst %.c, %, $(EXMP_SOURCES))

TESTS = $(patsubst %.c, %, $(TEST_SOURCES))

PROFS = $(patsubst %.c, %, $(PROF_SOURCES))

TUNE = $(patsubst %.c, %, $(TUNE_SOURCES))

all: all-dirs $(OBJS) recursive library 

all-dirs:
	$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir);)

clean:
	$(foreach dir, $(BUILD_DIRS), export BUILD_DIR=../build/$(dir); $(MAKE) -C $(dir) clean;)
	rm -f $(OBJS) $(LOBJS) $(TESTS) $(PROFS) $(EXMPS) $(FLINT_LIB) libflint.a
	rm -rf build

distclean: clean
	rm -f Makefile

dist:
	git archive --format tar --prefix flint-2.3/ trunk > ../flint-2.3.tar; gzip ../flint-2.3.tar

profile: all profiler.o
	mkdir -p build/profile
	$(foreach prog, $(PROFS), $(CC) -O2 -std=c99 $(INCS) $(prog).c profiler.o -o build/$(prog) $(LIBS);)
	$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir)/profile; export BUILD_DIR=../build/$(dir); $(MAKE) -C $(dir) profile;)

tune: all
	mkdir -p build/tune
	$(foreach prog, $(TUNE), $(CC) -O2 -std=c99 $(INCS) $(prog).c -o build/$(prog) $(LIBS);)
	$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir)/tune; export BUILD_DIR=../build/$(dir); $(MAKE) -C $(dir) tune;)

recursive:
	$(foreach dir, $(BUILD_DIRS), export BUILD_DIR=../build/$(dir); export MOD_DIR=$(dir); $(MAKE) -C $(dir);) 

examples: all $(LOBJS) library
	mkdir -p build/examples
	$(foreach prog, $(EXMPS), $(CC) $(CFLAGS) $(INCS) $(prog).c -o build/$(prog) $(LIBS);)

check: tests 
ifndef MOD
	mkdir -p build/interfaces/test
	$(foreach prog, $(TESTS), build/$(prog);)
	$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir)/test; export BUILD_DIR=../build/$(dir); $(MAKE) -C $(dir) check;)
	if [ "$(WANT_NTL)" -eq "1" ]; then \
		$(CXX) $(CFLAGS) $(INCS) interfaces/test/t-NTL-interface.cpp build/interfaces/NTL-interface.o -o build/interfaces/test/t-NTL-interface $(LIBS) -lntl; \
		build/interfaces/test/t-NTL-interface; \
	fi
else
	$(foreach dir, $(MOD), mkdir -p build/$(dir)/test; export BUILD_DIR=../build/$(dir); $(MAKE) -C $(dir) check;) 
endif

tests: $(TEST_SOURCES) $(FLINT_LIB)
	mkdir -p build/test
	$(foreach prog, $(TESTS), $(CC) $(CFLAGS) $(INCS) $(prog).c  -o build/$(prog) $(LIBS);)

library: library-recursive $(OBJS) $(LIB_OBJS)
	mkdir -p build
	mkdir -p build/interfaces
	if [ "$(WANT_NTL)" -eq "1" ]; then \
		if [ "$(FLINT_SHARED)" -eq "1" ]; then \
			$(CXX) -fPIC  $(CFLAGS) $(INCS) -c interfaces/NTL-interface.cpp -o build/interfaces/NTL-interface.lo; \
			$(CXX) -fPIC -shared build/interfaces/NTL-interface.lo $(LIB_OBJS) $(LIBS2) -o $(FLINT_LIB); \
		fi; \
		if [ "$(FLINT_STATIC)" -eq "1" ]; then \
			$(CXX) -fPIC  $(CFLAGS) $(INCS) -c interfaces/NTL-interface.cpp -o build/interfaces/NTL-interface.o; \
			$(AR) rcs libflint.a build/interfaces/NTL-interface.o $(OBJS) $(LINKLIBS); \
		fi; \
	fi
	if [ "$(WANT_NTL)" -ne "1" ]; then \
		if [ "$(FLINT_SHARED)" -eq "1" ]; then \
			$(CC) -fPIC -shared $(LIB_OBJS) $(LIBS2) -o $(FLINT_LIB); \
		fi; \
		if [ "$(FLINT_STATIC)" -eq "1" ]; then \
			$(AR) rcs libflint.a $(OBJS) $(LINKLIBS); \
		fi; \
	fi

library-recursive:
	if [ "$(FLINT_STATIC)" -eq "1" ]; then \
		$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir); export BUILD_DIR=../build/$(dir); export MOD_DIR=$(dir); $(MAKE) -C $(dir);) \
	fi
	if [ "$(FLINT_SHARED)" -eq "1" ]; then \
		$(foreach dir, $(BUILD_DIRS), mkdir -p build/$(dir); export BUILD_DIR=../build/$(dir); export MOD_DIR=$(dir); $(MAKE) -C $(dir) library;) \
	fi

$(FLINT_LIB): library

install: library
	mkdir -p $(PREFIX)/lib
	mkdir -p $(PREFIX)/include/flint
	if [ "$(FLINT_SHARED)" -eq "1" ]; then \
		cp $(FLINT_LIB) $(PREFIX)/lib; \
	fi
	if [ "$(FLINT_STATIC)" -eq "1" ]; then \
		cp libflint.a $(PREFIX)/lib; \
	fi
	cp *.h $(PREFIX)/include/flint

.PHONY: profile library library-recursive recursive clean check check-recursive all

build/%.lo: %.c
	$(CC) -fPIC $(CFLAGS) $(INCS) -c $< -o $@

build/%.o: %.c
	$(CC) -fPIC $(CFLAGS) $(INCS) -c $< -o $@

BUILD_DIRS = ulong_extras long_extras perm fmpz fmpz_vec fmpz_poly fmpq_poly \
   fmpz_mat mpfr_vec mpfr_mat nmod_vec nmod_poly \
   arith mpn_extras nmod_mat fmpq fmpq_mat padic fmpz_poly_q \
   fmpz_poly_mat nmod_poly_mat fmpz_mod_poly fmpz_factor fmpz_poly_factor \
   fft qsieve
